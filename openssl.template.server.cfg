# THIS FILE IS BASED OFF  https://github.com/openssl/openssl/blob/master/apps/openssl.cnf
# //TOTEST:               https://web.mit.edu/crypto/openssl.cnf
# THIS IS YOUR BIBLE:     https://cabforum.org/extended-validation/
# THIS IS YOUR GUIDE:     https://letsencrypt.org/documents/isrg-cp-v2.5/
# THIS IS YOUR TESTER:    https://tls-observatory.services.mozilla.com/static/ev-checker.html

# .include openssl.github.cfg

# This definition stops the following lines choking if HOME isn't
# defined.
HOME                              = .

# Use this in order to automatically load providers // BUG: this breaks eveything
# openssl_conf                      = openssl_init
# # Error configuring OpenSSL modules
# # 5412:error:25078067:DSO support routines:win32_load:could not load the shared library:crypto\dso\dso_win32.c:108:filename(providers.dll)
# # 5412:error:25070067:DSO support routines:DSO_load:could not load the shared library:crypto\dso\dso_lib.c:162:
# # 5412:error:0E07506E:configuration file routines:module_load_dso:error loading dso:crypto\conf\conf_mod.c:224:module=providers, path=providers
# # 5412:error:0E076071:configuration file routines:module_run:unknown module name:crypto\conf\conf_mod.c:165:module=providers

# Comment this out if you deliberately want to ignore
# configuration errors
config_diagnostics                = 1

# Extra OBJECT IDENTIFIER info:
# oid_file                          = $ENV::HOME/.oid
oid_section                       = new_oids

# To use this configuration file with the "-extfile" option of the
# "openssl x509" utility, name here the section containing the
# X.509v3 extensions to use:
# extensions		=
# (Alternatively, use a configuration file that has only
# X.509v3 extensions in its main [= default] section.)

[ new_oids ]
# We can add new OIDs in here for use by 'ca', 'req' and 'ts'.
# Add a simple OID like this:
# testoid1=1.2.3.4
# Or use config file substitution like this:
# testoid2=${testoid1}.5.6

# Policies used by the TSA examples.
tsa_policy1 = 1.2.3.4.1
tsa_policy2 = 1.2.3.4.5.6
tsa_policy3 = 1.2.3.4.5.7

# https://stackoverflow.com/questions/51641962/how-do-i-create-my-own-extended-validation-certificate-to-display-a-green-bar/51644728
# Those 3 required attributes in the DN (businessCategory, serialNumber and jurisdictionCountryName) MUST be present. But openssl may not know the OID of businessCategory and jurisdictionCountryName. Fille them in below:
# businessCategory                  = 2.5.4.15                  # been added: error: object identifier routines:OBJ_create:oid exists
# jurisdictionCountryName           = 1.3.6.1.4.1.311.60.2.1.3  # been added: error: object identifier routines:OBJ_create:oid exists

certificateTemplateName           = 1.3.6.1.4.1.311.20.2        # Certificate Template Name Domain Controller https://www.alvestrand.no/objectid/1.3.6.1.4.1.311.20.2.html

# For FIPS
# Optionally include a file that is generated by the OpenSSL fipsinstall
# application. This file contains configuration data required by the OpenSSL
# fips provider. It contains a named section e.g. [fips_sect] which is
# referenced from the [provider_sect] below.
# Refer to the OpenSSL security policy for more information.
# .include fipsmodule.cnf

[openssl_init]
providers = provider_sect

# List of providers to load
[provider_sect]
default = default_sect
# The fips section name should match the section name inside the
# included fipsmodule.cnf.
# fips = fips_sect

[default_sect]
# activate = 1


####################################################################
[ ca ]
default_ca	= CA_default		# The default ca section

####################################################################
[ CA_default ]
dir                               = {ORG_Root}/{ORG_Intermediate}

############################################# https://jamielinux.com/docs/openssl-certificate-authority/appendix/root-configuration-file.html
certs                             = $dir
crl_dir                           = $dir
new_certs_dir                     = $dir
database                          = $dir/index.txt
serial                            = $dir/serial
RANDFILE                          = $dir/.rnd   # https://stackoverflow.com/questions/2229723/how-do-i-make-openssl-write-the-randfile-on-windows-vista

# The root key and root certificate.
private_key                       = $dir/{CADOMAIN}.key
certificate                       = $dir/{CADOMAIN}.crt

# For certificate revocation lists.
crlnumber                         = $dir/crlnumber
crl                               = $dir/{CADOMAIN}.crl.crt
crl_extensions                    = crl_ext
default_crl_days                  = 30

# SHA-1 is deprecated, so use SHA-2 instead.
default_md                        = {default_md_Server}

default_days                      = {default_days_Server}

# https://thevogtechblog.blogspot.com/2016/12/using-openssl-as-root-ca-for-windows.html
# Using policy_match only makes sense for Root CA, and only match for countryName/stateOrProvinceName makes sense
# organizationName = match when they don't match, will break the subordinates crt generation with RC=1 and no message!
# Since we control the subjects, why even bother? policy_match/policy_match will haunt you for hours so don't use it.
# policy                            = policy_match
policy                            = policy_anything

# copy_extensions Ensure that the extensione in the CSR make it to the signed certificate (like subjectAltNames)
# copy_extensions is needed in root.cfg only
# copy_extensions                   = copy

req_extensions                    = v3_server_ca      # The extensions to add to a certificate request

name_opt          = ca_default
cert_opt          = ca_default

# Ensure that the extensione in the CSR make it to the signed certificate (like subjectAltNames); inaplicable for root ca
# copy_extensions   = copy

# This will make "openssl ca" output those attributes, if it finds them in the CSR:
[ policy_match ]
countryName                       = match
stateOrProvinceName               = match
organizationName                  = supplied                # match will break int ca generation with RC=1 and no message
organizationalUnitName            = optional
commonName                        = supplied
emailAddress                      = optional
businessCategory                  = optional
serialNumber                      = optional
jurisdictionCountryName           = optional

[ policy_anything ]
countryName                       = optional
stateOrProvinceName               = optional
localityName                      = optional
organizationName                  = optional
organizationalUnitName            = optional
commonName                        = supplied
emailAddress                      = optional
businessCategory                  = optional
serialNumber                      = optional
jurisdictionCountryName           = optional


[ req ]
distinguished_name                = req_distinguished_name
attributes                        = req_attributes

string_mask                       = utf8only
input_password                    = {PASSWORD_Server}
output_password                   = {PASSWORD_Server}
# prompt                            = no        # there is a bug, use -batch instead

default_bits                      = {default_bits_Server}

# SHA-1 is deprecated, so use SHA-2 instead.
default_md                        = {default_md_Server}

# Extension to add when the -x509 option is used.
x509_extensions                   = v3_server_ca


[ req_attributes ]
# the "challenge password" requested as part of the CSR generation is not the same thing as a passphrase used to encrypt the secret key. The "challenge password" is basically a shared-secret nonce between you and the SSL certificate-issuer (aka Certification Authority, or CA), embedded in the CSR, which the issuer may use to authenticate you should that ever be needed. Some SSL certificate-issuers make that clearer than others
challengePassword                 = Challenge password for CSR
challengePassword_default         = {challengePassword}
challengePassword_min             = 0
challengePassword_max             = 20
unstructuredName_default          = {unstructuredName}
unstructuredName_max              = 64

# complete list of deprecated/required fields here: https://letsencrypt.org/documents/isrg-cp-v2.5/#7.1.4-name-forms
[ req_distinguished_name ]
countryName                       = Country Name (2 letter code)
stateOrProvinceName               = State or Province Name
localityName                      = Locality Name
0.organizationName                = Organization Name
organizationalUnitName            = Organizational Unit Name
commonName                        = Common Name
emailAddress                      = Email Address

# (deprecated) If present, commonName MUST contain a single IP address or Fully-Qualified Domain Name that is one of the values contained in the Certificateâ€™s subjectAltName extension (see Section 7.1.4.2.1)
commonName_default                = {commonName_Server}
countryName_default               = {countryName_Server}
0.organizationName_default        = {organizationName_Server}
organizationalUnitName_default    = {organizationalUnitName_Server}

stateOrProvinceName_default       = {stateOrProvinceName_Server}
localityName_default              = {localityName_Server}
emailAddress_default              = {emailAddress_Server}
# postalCode                        = "{postalCode_Server}"        # L/postalcode=
# streetAddress                     = "{streetAddress_Server}"     # L/street=

# //TODO: recheck where and why businessCategory/jurisdictionCountryName/serialNumber are needed
# digicert recommends using this one for cert only, not CA:
# Subject Business Category Field: subject:businessCategory (OID:  2.5.4.15)
businessCategory                  = Business Category (e.g. Private Organization)
businessCategory_default          = {businessCategory_Server}
# digicert recommends not adding jurisdictionC:
jurisdictionCountryName           = jurisdiction Country Name (2 chars)
jurisdictionCountryName_default   = {jurisdictionCountryName_Server}
# EV certificates: Those 3 required attributes in the DN (businessCategory, serialNumber and jurisdictionCountryName) MUST be present
# serialNumber                      = {serialNumber_Server}
# serialNumber_default              = {serialNumber_Server}

[ v3_req ]
# https://serverfault.com/questions/977445/generate-csr-including-certificate-template-information-with-openssl/977460#977460
certificateTemplateName           = ASN1:PRINTABLESTRING:CustomUserOffline



# note on certmgr:
# certmgr.msc will display a yellow warning triangle for the keyUsage extension because of critical

# extendedKeyUsage       Meaning                  https://www.openssl.org/docs/manmaster/man5/x509v3_config.html
# -----                  -------
# serverAuth             SSL/TLS Web Server Authentication
# clientAuth             SSL/TLS Web Client Authentication
# codeSigning            Code signing
# emailProtection        E-mail Protection (S/MIME)
# timeStamping           Trusted Timestamping
# OCSPSigning            OCSP Signing
# ipsecIKE               ipsec Internet Key Exchange
# msCodeInd              Microsoft Individual Code Signing (authenticode)
# msCodeCom              Microsoft Commercial Code Signing (authenticode)
# msCTLSign              Microsoft Trust List Signing
# msEFS                  Microsoft Encrypted File System

# 7. CERTIFICATE, CRL, AND OCSP PROFILES  https://letsencrypt.org/documents/isrg-cp-v2.5/#7.-certificate%2C-crl%2C-and-ocsp-profiles
# see hierarchies here: https://www.globalsign.com/en/blog/what-is-an-intermediate-or-subordinate-certificate-authority
# ----------------------------------------------------------------------------------------------------------------------------------
#############################
# 7.1.2.1 Root CA certificate https://letsencrypt.org/documents/isrg-cp-v2.5/#7.1.2-certificate-extensions
#############################
# the root CA is the highest level of the hierarchy and serves as the trust anchor.
# In order for an end entity certificate to be trusted, the root CA it chains up to must be embedded in the operating system, browser, device, or whatever is validating the certificate. 
# Root CAs are heavily secured and kept offline.
[ v3_ca ]
basicConstraints                = critical,CA:TRUE                                  # no pathlen for Root CA
keyUsage                        = critical, cRLSign, keyCertSign                    # digitalSignature should be removed to respect ISRG CP v2.5
# extendedKeyUsage                                                                  # MUST NOT be present for CA
subjectKeyIdentifier            = hash
authorityKeyIdentifier          = keyid:always,issuer
certificateTemplateName         = ASN1:PRINTABLESTRING:CustomUserOffline

# crlDistributionPoints           = @crl_section                                      # should be removed to respect ISRG CP v2.5
# subjectAltName                  = @alt_names_Root                                   # should be removed to respect ISRG CP v2.5
# authorityInfoAccess             = @ocsp_section                                     # should be removed to respect ISRG CP v2.5
# nameConstraints                 = critical,@permitted_intermediate_section           # should be removed to respect ISRG CP v2.5

####################################
# 7.1.2.2 Intermediate CA certificate https://letsencrypt.org/documents/isrg-cp-v2.5/#7.1.2-certificate-extensions
####################################
# these live between the root and end entity certificates and their main purpose is to define and authorize the types of certificates that can be requested from the root CA. 
# For example, on public hierarchies, you must separate SSL and S/MIME Intermediate CAs. 
# Another common scenario is separate Intermediates for different locations or you might have one for certificates with ECC keys and one for RSA keys.
[ v3_intermediate_ca ]
basicConstraints                = critical,CA:TRUE,pathlen:0                        # pathlen:0 = no subordinates under this one; pathlen:1 would mean this one is an intermediate
keyUsage                        = critical, cRLSign, keyCertSign, digitalSignature  # digitalSignature is used for signing OCSP responses
# extendedKeyUsage                                                                    # MUST NOT be present for CA
subjectKeyIdentifier            = hash
authorityKeyIdentifier          = keyid:always,issuer                               # MUST contain keyIdentifier; MUST NOT contain authorityCertIssuer or authorityCertSerialNumber
certificateTemplateName         = ASN1:PRINTABLESTRING:CustomUserOffline

crlDistributionPoints           = @crl_section_intermediate
# subjectAltName                  = @alt_names_Root                                   # should be removed to respect ISRG CP v2.5
authorityInfoAccess             = @ocsp_section_intermediate
nameConstraints                 = critical,@permitted_intermediate_section
# Name Constraints extension https://letsencrypt.org/documents/isrg-cp-v2.5/#7.1.5-name-constraints
# nameConstraints is (optional) If present, this extension SHOULD be marked critical[^*].
# nameConstraints is a multi-valued extension. The name should begin with the word permitted or excluded followed by a ;. The rest of the name and the value follows the syntax of subjectAltName except email:copy is not supported and the IP form should consist of an IP addresses and subnet mask separated by a /. 
certificatePolicies             = ia5org, {policiesOIDs_Intermediate} @policy_section  # certificatePolicies is for subordinates and end entities only
# certificatePolicies: Additional Technical Requirements for EV Certificates
# certificatePolicies explanations: https://docs.oracle.com/cd/E88353_01/html/E37852/x509v3-config-5openssl.html


[ permitted_intermediate_section ]
# cannot permit DNS roots, you won;t beable to sign for shot machine names...
# permitted;DNS.0 = .com
# permitted;DNS.1 = .lan
# permitted;DNS.2 = .local
# permitted;DNS.3 = .private
permitted;IP.0  = 10.0.0.0/255.0.0.0
permitted;IP.1  = 172.16.0.0/255.240.0.0
permitted;IP.2  = 192.168.0.0/255.255.0.0
# permitted;email = {permittedEmailDomain}
# cannot wildcard IP ranges: Error permitted subtree violation getting chain.
# excluded;IP.0   = 0.0.0.0/0.0.0.0
# excluded;IP.1   = 0:0:0:0:0:0:0:0/0:0:0:0:0:0:0:0

################################
# 7.1.2.3 Server certificate https://letsencrypt.org/documents/isrg-cp-v2.5/#7.1.2-certificate-extensions
################################
# these are the certificates installed on servers, machines, cryptographic hardware and devices (e.g. SSL/TLS issued to servers, code signing, client certificates issued to individuals for email encryption, digital signing, authentication).
[ v3_server_ca ]
basicConstraints                  = CA:FALSE
keyUsage                          = critical,digitalSignature,keyEncipherment         # (optional) keyCertSign and cRLSign MUST NOT be set
extendedKeyUsage                  = serverAuth,clientAuth,emailProtection             # MUST NOT be present for Root CA
subjectKeyIdentifier              = hash
authorityKeyIdentifier            = keyid,issuer:always                               # MUST contain keyIdentifier; MUST NOT contain authorityCertIssuer or authorityCertSerialNumber
certificateTemplateName           = ASN1:PRINTABLESTRING:CustomUserOffline

crlDistributionPoints             = @crl_section_server
subjectAltName                    = @alt_names_server
authorityInfoAccess               = @ocsp_section_server
certificatePolicies               = ia5org, {policiesOIDs_Server} @policy_section # certificatePolicies is for subordinates and end entities only
# certificatePolicies: Additional Technical Requirements for EV Certificates
# certificatePolicies explanations: https://docs.oracle.com/cd/E88353_01/html/E37852/x509v3-config-5openssl.html


################################
# 7...... User certificate https://letsencrypt.org/documents/isrg-cp-v2.5/#7.1.2-certificate-extensions
################################
[ v3_usr_cert ]
# Extensions for client certificates (`man x509v3_config`).
basicConstraints = CA:FALSE
nsCertType = client, email
nsComment = "OpenSSL Generated Client Certificate"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage = clientAuth, emailProtection
certificateTemplateName         = ASN1:PRINTABLESTRING:CustomUserOffline

crlDistributionPoints             = @crl_section_server
# subjectAltName                    = @alt_names_server
authorityInfoAccess               = @ocsp_section_server


# //TODO: find out if this should go under crl_section
[ crl_ext ]
# Extension for CRLs (`man x509v3_config`).
authorityKeyIdentifier=keyid:always
# # Only issuerAltName and authorityKeyIdentifier make any sense in a CRL.
# # http://openssl.6102.n7.nabble.com/CDP-and-IDP-v3-extensions-td14904.html
# issuerAltName                     = issuer:copy
# authorityKeyIdentifier            = keyid:always
# fullname                          = URI:{crlDistributionPoints.1}


[ crl_section_intermediate ]
# //TOTEST:   http://openssl.6102.n7.nabble.com/CDP-and-IDP-v3-extensions-td14904.html
# //WORKING:  https://thevogtechblog.blogspot.com/2016/12/using-openssl-as-root-ca-for-windows.html
# X509v3 CRL Distribution Points:
URI.0 = {crlDistributionPoints.1}
# URI.1 = http://pki.backup.com/ssl/root.crl

[ crl_section_server ]
# //TOTEST:   http://openssl.6102.n7.nabble.com/CDP-and-IDP-v3-extensions-td14904.html
# //WORKING:  https://thevogtechblog.blogspot.com/2016/12/using-openssl-as-root-ca-for-windows.html
# X509v3 CRL Distribution Points:
URI.0 = {crlDistributionPoints.1}
# URI.1 = http://pki.backup.com/ssl/root.crl


[ ocsp_section_intermediate ]
# //TODO:     manage revocations: https://www.securew2.com/blog/certificate-revocation-crl-explained/
# //TOTEST:   http://openssl.6102.n7.nabble.com/CDP-and-IDP-v3-extensions-td14904.html
# //WORKING:  https://thevogtechblog.blogspot.com/2016/12/using-openssl-as-root-ca-for-windows.html
# AIA (Authority Information Access): a certificate extension that contains information useful for verifying the trust status of a certificate. 
# authorityInfoAccessCaIssuers = url with issuer CA = not provided for Intermediate
# authorityInfoAccessOCSP = Online Certificate Status Protocol (OCSP) responder configured to provide status for the certificate below.
OCSP;URI.0                        = http://{authorityInfoAccessOCSP}
# OCSP;URI.1                        = http://pki.backup.com/ssl/ocsp/

[ ocsp_section_server ]
# //TODO:     manage revocations: https://www.securew2.com/blog/certificate-revocation-crl-explained/
# //TOTEST:   http://openssl.6102.n7.nabble.com/CDP-and-IDP-v3-extensions-td14904.html
# //WORKING:  https://thevogtechblog.blogspot.com/2016/12/using-openssl-as-root-ca-for-windows.html
# AIA (Authority Information Access): a certificate extension that contains information useful for verifying the trust status of a certificate. 
# authorityInfoAccessCaIssuers = url with issuer CA = not provided for Intermediate
# authorityInfoAccessOCSP = Online Certificate Status Protocol (OCSP) responder configured to provide status for the certificate below.
caIssuers;URI.0                   = http://{authorityInfoAccessCaIssuers}
# caIssuers;URI.1                   = http://pki.backup.com/IntermediateCA.crt
OCSP;URI.0                        = http://{authorityInfoAccessOCSP}
# OCSP;URI.1                        = http://pki.backup.com/ssl/ocsp/


[ policy_section ]
# https://stackoverflow.com/questions/51641962/how-do-i-create-my-own-extended-validation-certificate-to-display-a-green-bar/51644728
# https://www.sysadmins.lv/blog-en/certificate-policies-extension-all-you-should-know-part-1.aspx
# Object Identifiers (OID) are controlled by IANA and you need to register a Private Enterprise Number (PEN), or OID arc under 1.3.6.1.4.1 namespace.
# Here is the FREE PEN registration page: http://pen.iana.org/pen/PenApplication.page
# 1. The following fields MUST be present if the Intermediate CA is not controlled by the entity that controls the Root CA:
#  certificatePolicies:policyQualifiers:  policyQualifierIdâ€¢ id -qt 1 [RFC 5280]
#  certificatePolicies:policyQualifiers:qualifier:cPSuriâ€¢ HTTP URL for the Root CA's Certification Practice Statement
# 2. The certificatePolicies extension in EV Certificates issued to Subscribers MUST include the following:
#  certificatePolicies:policyIdentifier (Required)â€¢ The Issuerâ€™s EV policy identifier
#  certificatePolicies:policyQualifiers:policyQualifierId (Required)â€¢ id -qt 1 [RFC 5280]
#  certificatePolicies:policyQualifiers:qualifier:cPSuri (Required)â€¢ HTTP URL for the Intermediate CA's Certification Practice Statement
policyIdentifier                  = {policyIdentifier}

# CPS Pointer is an URL to a Certificate Practice Statement document that describes the policy under which the certificate in the subject was issued.
CPS.1                             = "{CPS.1}"
userNotice.1                      = @notice

[notice]
# User Notice is a small piece of text (RFC recommends to use no more than 200 characters) that describes particular policy.
explicitText                      = "{explicitText}"
organization                      = "{organization}"
noticeNumbers                     = 1, 2, 3, 4

# result in certmgr:
# [1]Certificate Policy:
     # Policy Identifier=2.23.140.1.2.2
# [2]Certificate Policy:
     # Policy Identifier=2.16.840.1.114412.1.1
# [3]Certificate Policy:
     # Policy Identifier=1.3.5.8
     # [3,1]Policy Qualifier Info:
          # Policy Qualifier Id=CPS
          # Qualifier:
               # http://my.host.name/ssl/cps/
     # [3,2]Policy Qualifier Info:
          # Policy Qualifier Id=CPS
          # Qualifier:
               # http://my.your.name/ssl/cps/
     # [3,3]Policy Qualifier Info:
          # Policy Qualifier Id=User Notice
          # Qualifier:
               # Notice Reference:
                    # Organization=Organization Inc.
                    # Notice Number=1, 2, 3, 4
               # Notice Text=Explicit Text Here


# extensions:subjectAltName https://letsencrypt.org/documents/isrg-cp-v2.5/#7.1.4-name-forms
# This extension MUST contain at least one entry. Each entry MUST be either a dNSName containing the Fully-Qualified Domain Name or an iPAddress containing the IP address of a server. The CA MUST confirm that the Applicant controls the Fully-Qualified Domain Name or IP address or has been granted the right to use it by the Domain Name Registrant or IP address assignee, as appropriate. Wildcard FQDNs are permitted.
[ alt_names_server ]
# the script will add all the DNS.{} list below:
# DNS.1                           = *.INTERNAL.YOURDOMAIN.LOCAL

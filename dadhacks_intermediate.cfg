# OpenSSL intermediate CA configuration file.
# Copy to `/root/ca/intermediate/openssl.cnf`.

# This definition stops the following lines choking if HOME isn't
# defined.
HOME			= .
# Comment this out if you deliberately want to ignore
# configuration errors
config_diagnostics = 1
# Extra OBJECT IDENTIFIER info:
# oid_file       = $ENV::HOME/.oid
oid_section = new_oids

[ new_oids ]
# Policies used by the TSA examples.
tsa_policy1 = 1.2.3.4.1
tsa_policy2 = 1.2.3.4.5.6
tsa_policy3 = 1.2.3.4.5.7
certificateTemplateName           = 1.3.6.1.4.1.311.20.2        # Certificate Template Name Domain Controller https://www.alvestrand.no/objectid/1.3.6.1.4.1.311.20.2.html

[ ca ]
# `man ca`
default_ca = CA_default

[ CA_default ]
dir                               = dadhacks

############################################# https://jamielinux.com/docs/openssl-certificate-authority/appendix/root-configuration-file.html
certs                             = $dir
crl_dir                           = $dir
new_certs_dir                     = $dir
database                          = $dir/index.txt
serial                            = $dir/serial
RANDFILE                          = $dir/.rnd   # https://stackoverflow.com/questions/2229723/how-do-i-make-openssl-write-the-randfile-on-windows-vista

# The root key and root certificate.
private_key                       = $dir/int.DOMAIN.key
certificate                       = $dir/int.DOMAIN.crt

# For certificate revocation lists.
crlnumber                         = $dir/crlnumber
crl                               = $dir/int.DOMAIN.crl

crl_extensions    = crl_ext
default_crl_days  = 30

# SHA-1 is deprecated, so use SHA-2 instead.
default_md        = sha512
req_extensions                    = v3_intermediate_ca      # The extensions to add to a certificate request

name_opt          = ca_default
cert_opt          = ca_default
default_days      = 3650
preserve          = no
policy            = policy_loose

# Ensure that the extensione in the CSR make it to the signed certificate (like subjectAltNames); inaplicable for root ca
copy_extensions   = copy

[ policy_strict ]
# The root CA should only sign intermediate certificates that match.
# See the POLICY FORMAT section of `man ca`.
countryName             = match
stateOrProvinceName     = match
organizationName        = supplied                # match will break int ca generation with RC=1 and no message
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional
businessCategory                  = optional
serialNumber                      = optional
jurisdictionCountryName           = optional

[ policy_loose ]
# Allow the intermediate CA to sign a more diverse range of certificates.
# See the POLICY FORMAT section of the `ca` man page.
countryName             = optional
stateOrProvinceName     = optional
localityName            = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional
businessCategory                  = optional
serialNumber                      = optional
jurisdictionCountryName           = optional

[ req ]
# Options for the `req` tool (`man req`).
default_bits        = 2048
distinguished_name  = req_distinguished_name
string_mask         = utf8only

# SHA-1 is deprecated, so use SHA-2 instead.
default_md          = sha512

# Extension to add when the -x509 option is used.
x509_extensions     = v3_ca

[ req_attributes ]
challengePassword_default         = aaaa
unstructuredName_default          = unstructuredName

[ req_distinguished_name ]
countryName                     = Country Name (2 letter code)
0.organizationName              = Organization Name
organizationalUnitName          = Organizational Unit Name
commonName                      = Common Name

# Optionally, specify some defaults.
countryName_default             = US
stateOrProvinceName_default     = AZ
localityName_default            = localityName
0.organizationName_default      = Organization int
organizationalUnitName_default  = OU int
emailAddress_default            = int@emailAddress
commonName_default              = CN.int

[ v3_ca ]
# Extensions for a typical CA (`man x509v3_config`).
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true
keyUsage = critical, digitalSignature, cRLSign, keyCertSign
# https://serverfault.com/questions/977445/generate-csr-including-certificate-template-information-with-openssl/977460#977460
certificateTemplateName           = ASN1:PRINTABLESTRING:CustomUserOffline

# crlDistributionPoints             = @crl_section
# subjectAltName                    = @alt_names_Server
# authorityInfoAccess               = @ocsp_section

[ v3_intermediate_ca ]
# Extensions for a typical intermediate CA (`man x509v3_config`).
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true, pathlen:0
keyUsage = critical, digitalSignature, cRLSign, keyCertSign
# https://serverfault.com/questions/977445/generate-csr-including-certificate-template-information-with-openssl/977460#977460
certificateTemplateName           = ASN1:PRINTABLESTRING:CustomUserOffline
certificatePolicies             = ia5org, 1.3.6.1.4.1, 2.23.140.1.2.1, 2.23.140.1.2.2, @policy_section        # certificatePolicies is for subordinates and end entities only

# crlDistributionPoints             = @crl_section
# subjectAltName                    = @alt_names_Server
# authorityInfoAccess               = @ocsp_section

[ v3_usr_cert ]
# Extensions for client certificates (`man x509v3_config`).
basicConstraints = CA:FALSE
nsCertType = client, email
nsComment = "OpenSSL Generated Client Certificate"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage = clientAuth, emailProtection
certificateTemplateName         = ASN1:PRINTABLESTRING:CustomUserOffline

# crlDistributionPoints             = @crl_section
# subjectAltName                    = @alt_names_Server
# authorityInfoAccess               = @ocsp_section

[ v3_server_cert ]
# Extensions for server certificates (`man x509v3_config`).
basicConstraints = CA:FALSE
nsCertType = server
nsComment = "OpenSSL Generated Server Certificate"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer:always
keyUsage = critical, digitalSignature, keyEncipherment
extendedKeyUsage = serverAuth
certificatePolicies               = ia5org, 1.3.6.1.4.1, 2.23.140.1.2.1, 2.23.140.1.2.2, @policy_section        # certificatePolicies is for subordinates and end entities only

# crlDistributionPoints             = @crl_section
# subjectAltName                    = @alt_names_Server
# authorityInfoAccess               = @ocsp_section

[ crl_ext ]
# Extension for CRLs (`man x509v3_config`).
authorityKeyIdentifier=keyid:always

[ ocsp ]
# Extension for OCSP signing certificates (`man ocsp`).
basicConstraints = CA:FALSE
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, digitalSignature
extendedKeyUsage = critical, OCSPSigning

[ policy_section ]
# https://stackoverflow.com/questions/51641962/how-do-i-create-my-own-extended-validation-certificate-to-display-a-green-bar/51644728
# https://www.sysadmins.lv/blog-en/certificate-policies-extension-all-you-should-know-part-1.aspx
# Object Identifiers (OID) are controlled by IANA and you need to register a Private Enterprise Number (PEN), or OID arc under 1.3.6.1.4.1 namespace.
# Here is the FREE PEN registration page: http://pen.iana.org/pen/PenApplication.page
# 1. The following fields MUST be present if the Intermediate CA is not controlled by the entity that controls the Root CA:
#  certificatePolicies:policyQualifiers:  policyQualifierId• id -qt 1 [RFC 5280]
#  certificatePolicies:policyQualifiers:qualifier:cPSuri• HTTP URL for the Root CA's Certification Practice Statement
# 2. The certificatePolicies extension in EV Certificates issued to Subscribers MUST include the following:
#  certificatePolicies:policyIdentifier (Required)• The Issuer’s EV policy identifier
#  certificatePolicies:policyQualifiers:policyQualifierId (Required)• id -qt 1 [RFC 5280]
#  certificatePolicies:policyQualifiers:qualifier:cPSuri (Required)• HTTP URL for the Intermediate CA's Certification Practice Statement
policyIdentifier                  = 1.3.6.1.5.5.7.2.1

# CPS Pointer is an URL to a Certificate Practice Statement document that describes the policy under which the certificate in the subject was issued.
CPS.1                             = "http://yourcompany.com/cps/"
userNotice.1                      = @notice

[notice]
# User Notice is a small piece of text (RFC recommends to use no more than 200 characters) that describes particular policy.
explicitText                      = "This certificate protects the private data transmitted throught the local domain YOURDOMAIN, own by yourCompany Inc."
organization                      = "yourCompany Inc."
noticeNumbers                     = 1, 2, 3, 4
